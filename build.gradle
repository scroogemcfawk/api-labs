/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/8.1/samples
 */
plugins {
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "1.9.20-Beta2"
    id 'org.springframework.boot' version '3.1.4'
}

apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
}
ext.jaxwsSourceDir = "${buildDir}/generated/sources/jaxws"

configurations {
    jaxb
    jaxws
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation('org.springframework.boot:spring-boot-starter-web-services') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation 'wsdl4j:wsdl4j'
    jaxb("org.glassfish.jaxb:jaxb-xjc")
    jaxws 'com.sun.xml.ws:jaxws-tools:3.0.0',
            'jakarta.xml.ws:jakarta.xml.ws-api:3.0.0',
            'jakarta.xml.bind:jakarta.xml.bind-api:3.0.0',
            'jakarta.activation:jakarta.activation-api:2.0.0',
            'com.sun.xml.ws:jaxws-rt:3.0.0'
//    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/generated-sources/jaxb'
            srcDir jaxwsSourceDir
        }
    }
}

tasks.register('genJaxb') {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.schema = "src/main/resources/countries.xsd"

    outputs.dir sourcesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }
        }
    }
}

tasks.register('wsimport') {
    description = 'Generate classes from wsdl using wsimport'


    doLast {
        project.mkdir(jaxwsSourceDir)
        ant {
            taskdef(name: 'wsimport',
                    classname: 'com.sun.tools.ws.ant.WsImport',
                    classpath: configurations.jaxws.asPath
            )
            wsimport(
                    keep: true,
                    destdir: jaxwsSourceDir,
                    extension: "true",
                    verbose: true,
                    wsdl: "http://localhost:8080/ws/countries.wsdl",
                    xnocompile: true,
                    package: "com.scroogemcfawk.tsu.apilabs.soapClient.wsdl") {
                xjcarg(value: "-XautoNameResolution")
            }
        }
    }
}

compileKotlin.dependsOn genJaxb
//compileKotlin.dependsOn wsimport





